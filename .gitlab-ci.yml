workflow:
    name: Solar System NodeJS Pipeline
    rules:
        - if: $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH =~ /^feature/
          when: always
        - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^feature/ && $CI_PIPELINE_SOURCE == 'merge_request_event'
          when: always
          
stages:
  - test
  - containerization
  - deploy

variables:
    DOCKER_USERNAME: siddharth67
    IMAGE_VERSION: $CI_PIPELINE_ID
    K8S_IMAGE: $DOCKER_USERNAME/solar-system:$IMAGE_VERSION
    # K8S_IMAGE: $DOCKER_USERNAME/solar-system:1606875918
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: superuser
    MONGO_PASSWORD: $M_DB_PASSWORD

.prepare_deployment_environment: &kuberntes_deploy_job
  image:
    name: alpine:3.7
  dependencies: []
  before_script:
    - wget https://storage.googleapis.com/kubernetes-release/release/$(wget -q -O - https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/bin/kubectl
    - apk add --no-cache gettext
    - envsubst -V  
 
unit_testing:
  stage: test
  image: node:17-alpine3.14
  before_script:
    - npm install  
  script:
    - npm test
  artifacts:
    when: always
    expire_in: 3 days
    name: Moca-Test-Result
    paths:
      - test-results.xml
    reports:
      junit: test-results.xml

docker_build:
  stage: containerization
  image: docker:24.0.5
  dependencies: []
  needs:
    - unit_testing
  services:
    - docker:24.0.5-dind
  script:
    - docker build -t $DOCKER_USERNAME/solar-system:$IMAGE_VERSION .
    - docker images $DOCKER_USERNAME/solar-system:$IMAGE_VERSION
    - mkdir image
    - docker save $DOCKER_USERNAME/solar-system:$IMAGE_VERSION > image/solar-system-image-$IMAGE_VERSION.tar
  artifacts:
    paths:
      - image
    when: on_success
    expire_in: 3 days

docker_test:
  stage: containerization
  image: docker:24.0.5
  needs:
    - docker_build
  services:
    - docker:24.0.5-dind
  script:
    - docker load -i image/solar-system-image-$IMAGE_VERSION.tar
    - docker run --name solar-system-app -d -p 3000:3000 $DOCKER_USERNAME/solar-system:$IMAGE_VERSION
    - export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
    - echo $IP
    - docker run  alpine wget -q -O - http://$IP:3000/live | grep live

docker_push:  
  stage: containerization
  needs:
    - docker_build
    - docker_test
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    -  docker load -i image/solar-system-image-$IMAGE_VERSION.tar
    -  docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
    -  docker push $DOCKER_USERNAME/solar-system:$IMAGE_VERSION

k8s_deploy:
  <<: *kuberntes_deploy_job
  stage: deploy
  needs:
    - docker_push
  script:
    - export KUBECONFIG=$DEV_KUBE_CONFIG
    - kubectl version -o yaml
    - kubectl config get-contexts
    - kubectl get nodes
    - export INGRESS_IP=$(kubectl get service -n app-routing-system nginx -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
    - echo $INGRESS_IP
    ##### Installation et configuration de cert-manager et d'un ClusterIssuer pour gérer les certificats TLS automatiquement
    ##### Garantir que notre cluster Kubernetes peut sécuriser les communications via HTTPS 
    - kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.10.1/cert-manager.yaml
    - sleep 30
    - kubectl get pods -n cert-manager
    - kubectl apply -f kubernetes/manifest/clusterIssuer.yaml
    - echo "Waiting for ClusterIssuer to be created..."
    - kubectl wait --for=condition=Ready clusterissuer --all --timeout=60s
    - kubectl get clusterissuer
    - kubectl describe clusterissuer letsencrypt
    ##### Création de secret Kubernetes contenant les identifiants pour MongoDB 
    - kubectl -n $NAMESPACE create secret generic mongo-db-creds --from-literal=MONGO_URI=$MONGO_URI --from-literal=MONGO_USERNAME=$MONGO_USERNAME --from-literal=MONGO_PASSWORD=$MONGO_PASSWORD --save-config --dry-run=client -o yaml | kubectl apply -f -
    - for i in kubernetes/manifest/*.yaml; do envsubst < $i | kubectl apply -f -; done
    - sleep 30
    ####  vérifier l’état des certificats TLS associés à l’ingress.
    - kubectl get certificate ingress-local-tls -n $NAMESPACE
    - kubectl describe certificate ingress-local-tls -n $NAMESPACE 
    #### Lister toutes les ressources 
    - kubectl -n $NAMESPACE get all,secret,ing
    - echo "INGRESS_URL=$(kubectl -n $NAMESPACE get ing -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> app_ingress_url.env
  artifacts:
    reports:
      dotenv: app_ingress_url.env
  environment:
    name: production
    url: https://$INGRESS_URL

k8s_integration_testing:
  stage: deploy
  image: alpine:3.4
  needs:
    - k8s_deploy
  before_script:
    - apk --no-cache add curl
    - apk --no-cache add jq
  script:
    - echo $INGRESS_URL
    - curl -s -k https://$INGRESS_URL/live | jq -r .status | grep -i live
    - curl -s -k https://$INGRESS_URL/ready | jq -r .status | grep -i ready
